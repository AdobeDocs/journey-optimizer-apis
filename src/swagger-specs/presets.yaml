---
openapi: 3.0.0

info:
  description: CJM Message Presets API
  version: "1.0.0"
  title: CJM Message Presets API
  contact:
    email: bhanusha@adobe.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

security:
  - BearerAuth: []
  - ApiKeyAuth: []

servers:
  - url: https://platform.adobe.io/journey/imp/config

paths:
  /presets/global:
    parameters:
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
      - $ref: '#/components/parameters/x-sandbox-name'
      - $ref: '#/components/parameters/x-sandbox-id'
    get:
      summary: Get global presets
      operationId: getGlobalPresets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalPresetsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    put:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Update global presets
      operationId: updateGlobalPresets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/globalPresets'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalPresetsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /presets/content-brandings:
    parameters:
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
      - $ref: '#/components/parameters/x-sandbox-name'
      - $ref: '#/components/parameters/x-sandbox-id'
    post:
      summary: Create content branding
      operationId: createContentBranding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentBrandingRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentBrandingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    get:
      summary: Get content brandings
      operationId: getContentBrandings
      parameters:
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/property'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _page:
                    $ref: '#/components/schemas/page'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentBrandingResponse'
                  _links:
                    $ref: '#/components/schemas/contentBrandingListLink'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /presets/content-brandings/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
      - $ref: '#/components/parameters/x-sandbox-name'
      - $ref: '#/components/parameters/x-sandbox-id'

    get:
      summary: Get content branding by id
      operationId: getContentBrandingById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentBrandingResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    put:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Update content branding by id
      operationId: updateContentBrandingById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentBrandingRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    patch:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Patch a content branding
      operationId: patchContentBranding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cbPatchReq'
      responses:
        '204':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    delete:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Delete Draft/Failed content brandings
      operationId: deleteContentBrandingById
      responses:
        '204':
          description: No Content
        '422':
          description: Unprocessable Entity

  /presets/content-brandings/:
    parameters:
      - in: query
        name: sourceId
        required: true
        description: Source content branding id to clone from
        schema:
          type: string
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
      - $ref: '#/components/parameters/x-sandbox-id'
      - $ref: '#/components/parameters/x-sandbox-name'
    post:
      summary: Clones a Content Branding in Draft status
      operationId: cloneContentBranding
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentBrandingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: The IMS user/service token to access the service.

    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: >-
        The clientId of the requester.Find details here
        https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=API&title=How+to+whitelist+Client+ID+in+API+Portal

  parameters:
    x-api-key:
      name: x-api-key
      description: The API key belonging to the calling client.
      required: true
      in: header
      schema:
        type: string
    x-request-id:
      name: x-request-id
      description: A unique id generated by Adobe.io.
      required: false
      in: header
      schema:
        type: string
    x-gw-ims-org-id:
      name: x-gw-ims-org-id
      description: The ims org id for which the action is being taken.
      required: true
      in: header
      schema:
        type: string
    x-sandbox-name:
      name: x-sandbox-name
      description: >-
        Provides the platform Sandbox Name
      required: true
      in: header
      schema:
        type: string
    x-sandbox-id:
      name: x-sandbox-id
      description: >-
        Provides the platform Sandbox Id
      required: false
      in: header
      schema:
        type: string
    if-match:
      name: If-Match
      description: >-
        Provide etag for conditional update. If etag does not match, the request will fail.
      in: header
      schema:
        type: string
    orderBy:
      name: orderBy
      description: >-
        Sort parameter and direction for sorting the response.
        Add the prefix as -/+ for desc/asc. If unspecified, the response will be sorted in desc order.
        Ex. orderBy=+modifiedAt.
      in: query
      schema:
        type: string
        default: -modifiedAt
      required: false
    limit:
      name: limit
      description: >-
        Limit response to a specified positive number of objects.
        Ex. limit=10
      in: query
      schema:
        type: integer
        default: 20
      required: false
    start:
      name: start
      description: >-
        Used for pagination. Specifies the criteria for next page
        with respect to the property specified in orderBy.
        Ex. start=2016-08-29T09:12:33.001Z.
      in: query
      schema:
        type: string
      required: false
    property:
      name: property
      description: >-
        <p>Optional property filters. Please refer to <a href="https://git.corp.adobe.com/pages/experience-platform/api-guidelines/5-sorting_paging_and_filtering.html#533-filtering-by-property">api guidelines</a> for filtering support in APIs.
        Filtering is supported on following properties: id, name, ipPoolId, email, push, modifiedAt, createdAt, createdBy and modifiedBy
        Ex. property=name==presetname, property=email</p>
      in: query
      schema:
        items:
          type: string
        type: array
      required: false

  schemas:
    basicResponse:
      type: object
      properties:
        id:
          type: string
          example: 3603ed66-ae86-42b8-8a90-d4b4e54e7c3b
        createdAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        createdBy:
          type: string
          example: '4c0190e5d702748f0931@AdobeId'
        modifiedAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        modifiedBy:
          type: string
          example: '4c0190e5d702748f0931@AdobeId'
        _etag:
          type: string
          description: The etag associated with this.
          example: '"eab98d24-18af-48ae-90f9-e59d4f8cfb2b"'

    globalPresets:
      type: object
      required:
        - emailExecutions
        - suppression
      properties:
        emailExecutions:
          type: array
          items:
            $ref: '#/components/schemas/emailExecution'
        suppression:
          $ref: '#/components/schemas/suppressionSettings'

    emailExecution:
      type: object
      properties:
        address:
          type: string
          example: "personalEmail.address"
        namespace:
          type: string
          example: "Email"
          description: Email Namespace

    globalPresetsResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/globalPresets'
        - $ref: '#/components/schemas/basicResponse'
      properties:
        _links:
          $ref: '#/components/schemas/globalPresetsSelfLink'

    contentBrandingRequest:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
        description:
          type: string
        email:
          required:
            - messageType
            - ipPoolId
            - mirrorDomain
          allOf:
            - $ref: '#/components/schemas/contentBrandEmailPresets'
          properties:
            subDomainId:
              type: string
              description: active subdomain id
              example: 'a3b52a10-9b5c-11eb-a8b3-0242ac130003'
            messageType:
              $ref: '#/components/schemas/messageType'
            ipPoolId:
              type: string
              example: 'a3b52a10-9b5c-11eb-a8b3-0242ac130003'
        push:
          type: object
          required:
            - launchAppConfigIds
          properties:
            launchAppConfigIds:
              type: array
              items:
                type: string
                example: 'ACe29286228eac4fd994f763bf609c1f96'
        status:
          $ref: '#/components/schemas/contentBrandingStatus'

    contentBranding:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
        description:
          type: string
        email:
          required:
            - messageType
            - ipPoolId
            - mirrorDomain
          allOf:
            - $ref: '#/components/schemas/contentBrandEmailPresets'
          properties:
            messageType:
              $ref: '#/components/schemas/messageType'
            domains:
              $ref: '#/components/schemas/contentBrandingDomainPresets'
            ipPoolId:
              type: string
        push:
          $ref: '#/components/schemas/contentBrandPushPresets'
        status:
          $ref: '#/components/schemas/contentBrandingStatus'

    contentBrandingResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentBranding'
        - $ref: '#/components/schemas/basicResponse'
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/errorResponse'
        _links:
          $ref: '#/components/schemas/contentBrandingSelfLink'

    contentBrandingStatus:
      type: string
      enum:
        - draft
        - processing
        - active
        - failed
        - deactivated

    messageType:
      type: string
      enum:
        - transactional
        - marketing

    contentBrandingDomainPresets:
      type: object
      properties:
        subDomainId:
          type: string
          example: "a13d1d49-3473-4a21-a949-b6624e2fc5c8"
        subDomain:
          type: string
          example: "marketing.example.com"
        trackingDomain:
          type: string
          example: "data.marketing.example.com"
        resourceDomain:
          type: string
          example: "cdn.marketing.example.com"
        mirrorDomain:
          type: string
          example: "data.marketing.example.com"

    cbPatchReq:
      type: array
      items:
        properties:
          op:
            $ref: '#/components/schemas/patchOp'
          path:
            type: string
            example: '/status'
          value:
            type: string
            example: 'deactivated'

    patchOp:
      type: string
      enum:
        - replace

    contentBrandEmailPresets:
      type: object
      required:
        - sender
        - replyTo
        - error
      properties:
        sender:
          $ref: '#/components/schemas/emailSenderPresets'
        replyTo:
          $ref: '#/components/schemas/emailReplyToPresets'
        error:
          $ref: '#/components/schemas/emailErrorPresets'
        affinityId:
          type: string
          description: Affinity Id to send email
        retrySettings:
          $ref: '#/components/schemas/retrySettingsPresets'

    emailSenderPresets:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Name of the sender
        email:
          type: string
          format: email
          description: Email addrress of the sender

    emailReplyToPresets:
      type: object
      required:
        - email
        - name
        - forwardEmail
      properties:
        email:
          type: string
          format: email
          description: The reply to email address
        name:
          type: string
          description: The reply to name
        forwardEmail:
          type: string
          format: email
          description: The reply to forward email address

    emailErrorPresets:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The error email address

    retrySettingsPresets:
      type: object
      required:
        - retryPeriodSeconds
      properties:
        retryPeriodSeconds:
          type: integer
          description: Email retry period in seconds
          example: 302400


    contentBrandPushPresets:
      type: object
      properties:
        appSelection:
          type: array
          required:
            - self
          items:
            $ref: '#/components/schemas/appSelectionPresets'

    appSelectionPresets:
      type: object
      required:
        - appId
        - appPlatform
        - name
      properties:
        appId:
          type: string
          example: "com.adobe.photoshop"
        appPlatform:
          type: string
          example: "apns/fcm"
        name:
          type: string
          description: Optional name

    suppressionSettings:
      type: object
      required:
        - noOfBounceDays
      properties:
        noOfBounceDays:
          type: integer
          default: 3

    errorResponse:
      type: object
      properties:
        type:
          type: string
          example: "https://ns.adobe.com/aep/errors/MPS-000052-400"
        title:
          type: string
          example: "A concise error message"
        status:
          type: string
          example: 400
        report:
          type: object
          additionalProperties:
            type: string
          example:
            requestId: "4b485f56-9a06-4c00-ae03-e4a27468b113"

    page:
      type: object
      properties:
        orderby:
          type: string
          enum:
            - modifiedAt
          example: '-modifiedAt'
        start:
          type: string
          example: '2016-08-29T09:12:33.001Z'
        next:
          type: string
          example: '2016-08-29T09:12:33.001Z'
        count:
          type: integer
          example: 1
        property:
          type: array
          items:
            type: string
            example: "name==presetname"

    globalPresetsSelfLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/presets/global'

    contentBrandingSelfLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/presets/content-brandings/3603ed66-ae86-42b8-8a90-d4b4e54e7c3b'

    contentBrandingListLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
        next:
          $ref: '#/components/schemas/hRefLink'
        page:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/presets/content-brandings'
        next:
          href: '/presets/content-brandings?start=2016-08-29T09:12:33.001Z&orderBy=modifiedAt&limit=10&property=name==presetname'
        page:
          href: '/presets/content-brandings?orderBy={orderBy}&start={start}&limit={limit}&property={property}'

    hRefLink:
      type: object
      required:
        - href
      properties:
        href:
          type: string
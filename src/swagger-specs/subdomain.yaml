---
openapi: 3.0.0

info:
  description: Subdomain Delegation Config API
  version: "1.0.0"
  title: Subdomain Delegation Config API
  contact:
    email: bhanusha@adobe.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

security:
  - BearerAuth: []
  - ApiKeyAuth: []

servers:
  - url: https://platform.adobe.io/journey/imp/config

paths:
  /sdd/subdomains:
    parameters:
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
    get:
      summary: Get subdomains
      operationId: getSubdomains
      parameters:
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/start'
        - in: query
          name: property
          description: >-
            <p>Optional property filters. Please refer to <a href="https://git.corp.adobe.com/pages/experience-platform/api-guidelines/5-sorting_paging_and_filtering.html#533-filtering-by-property">api guidelines</a> for filtering support in APIs.
            Filtering is supported on the following properties: subdomain, status, isPrimary, modifiedAt, createdAt, createdBy and modifiedBy.
            Ex. property=createdAt>=2021-01-14T09:12:33.001Z&property=createdAt<2021-02-21T09:12:33.001Z</p>
          schema:
            type: array
            items:
              type: string
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _page:
                    $ref: '#/components/schemas/page'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/delegatedSubdomainResponse'
                  _links:
                    $ref: '#/components/schemas/delegatedSubdomainListLink'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    post:
      summary: Create a subdomain
      operationId: createSubdomain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/delegatedSubdomain'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delegatedSubdomainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Conflict. Either subdomain with same name already exist, or a subdomain is being delegated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /sdd/subdomains/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'

    get:
      summary: Get a subdomain
      operationId: getSubdomainById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delegatedSubdomainResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    put:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Update a subdomain
      operationId: updateSubdomainById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/delegatedSubdomain'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delegatedSubdomainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    patch:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Patch a subdomain
      operationId: patchSubdomain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/delegatedSubdomainPatchReq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delegatedSubdomainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    delete:
      parameters:
        - $ref: '#/components/parameters/if-match'
      summary: Delete Draft/Failed subdomain
      operationId: deleteSubdomainById
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '412':
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /sdd/ptr-records:
    parameters:
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
    get:
      summary: Get PTR records
      operationId: getPtrRecords
      parameters:
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/start'
        - in: query
          name: property
          description: >-
            <p>Optional property filters. Please refer to <a href="https://git.corp.adobe.com/pages/experience-platform/api-guidelines/5-sorting_paging_and_filtering.html#533-filtering-by-property">api guidelines</a> for filtering support in APIs.
            Filtering is supported on the following properties: ptrSubdomain, modifiedAt, createdAt, createdBy and modifiedBy.
            Ex. property=createdAt>=2021-01-14T09:12:33.001Z&property=createdAt<2021-02-21T09:12:33.001Z</p>
          schema:
            type: array
            items:
              type: string
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _page:
                    $ref: '#/components/schemas/page'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ptrRecordResponse'
                  _links:
                    $ref: '#/components/schemas/ptrRecordListLink'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /sdd/ptr-records/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'

    get:
      summary: Get a PTR record
      operationId: getPtrRecordById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ptrRecordResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /sdd/dns-records/{subdomain}:
    parameters:
      - in: path
        name: subdomain
        required: true
        description: Subdomain for which we need to fetch the DNS records
        schema:
          $ref: '#/components/schemas/subdomain'
      - $ref: '#/components/parameters/x-api-key'
      - $ref: '#/components/parameters/x-request-id'
      - $ref: '#/components/parameters/x-gw-ims-org-id'
    get:
      summary: Get subdomain DNS records
      operationId: getSubdomainRecords
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dnsRecord'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: The IMS user token to access the service.

    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: >-
        The clientId of the requester.Find details here
        https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=API&title=How+to+whitelist+Client+ID+in+API+Portal
  parameters:
    x-api-key:
      name: x-api-key
      description: The API key belonging to the calling client.
      required: true
      in: header
      schema:
        type: string
    x-request-id:
      name: x-request-id
      description: A unique id generated by Adobe.io.
      required: false
      in: header
      schema:
        type: string
    x-gw-ims-org-id:
      name: x-gw-ims-org-id
      description: The ims org id for which the action is being taken.
      required: true
      in: header
      schema:
        type: string
    if-match:
      name: If-Match
      description: >-
        Provide etag for conditional update. If etag does not match, the request will fail.
      in: header
      schema:
        type: string
    orderBy:
      name: orderBy
      description: >-
        Sort parameter and direction for sorting the response.
        Add the prefix as -/+ for desc/asc. If unspecified, the response will be sorted in desc order.
        Ex. orderBy=+modifiedAt.
      in: query
      schema:
        type: string
        default: -modifiedAt
      required: false
    limit:
      name: limit
      description: >-
        Limit response to a specified positive number of objects.
        Ex. limit=10
      in: query
      schema:
        type: integer
        default: 20
      required: false
    start:
      name: start
      description: >-
        Used for pagination. Specifies the criteria for next page
        with respect to the property specified in orderBy.
        Ex. start=2016-08-29T09:12:33.001Z.
      in: query
      schema:
        type: string
      required: false

  schemas:
    errorResponse:
      type: object
      properties:
        type:
          type: string
          example: "https://ns.adobe.com/aep/errors/CJMRT-000052-400"
        title:
          type: string
          example: "A concise error message"
        status:
          type: string
          example: 400
        report:
          type: object
          additionalProperties:
            type: string
          example:
            requestId: "4b485f56-9a06-4c00-ae03-e4a27468b113"

    page:
      type: object
      properties:
        orderby:
          type: string
          enum:
            - modifiedAt
          example: '-modifiedAt'
        start:
          type: string
          example: '2016-08-29T09:12:33.001Z'
        next:
          type: string
          example: '2016-08-29T09:12:33.001Z'
        count:
          type: integer
          example: 1
        property:
          type: array
          items:
            type: string
            example: "status==active"

    delegatedSubdomainListLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
        next:
          $ref: '#/components/schemas/hRefLink'
        page:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/sdd/delegated-subdomains'
        next:
          href: '/sdd/delegated-subdomains?start=2016-08-29T09:12:33.001Z&orderBy=modifiedAt&limit=10'
        page:
          href: '/sdd/delegated-subdomains?orderBy={orderBy}&start={start}&limit={limit}'

    ptrRecordListLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
        next:
          $ref: '#/components/schemas/hRefLink'
        page:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/sdd/ptr-records'
        next:
          href: '/sdd/ptr-records?start=2016-08-29T09:12:33.001Z&orderBy=modifiedAt&limit=10'
        page:
          href: '/sdd/ptr-records?orderBy={orderBy}&start={start}&limit={limit}'

    delegatedSubdomainSelfLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/sdd/delegated-subdomains/3603ed66-ae86-42b8-8a90-d4b4e54e7c3b'

    ptrRecordSelfLink:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/hRefLink'
      example:
        self:
          href: '/sdd/ptr-records/3603ed66-ae86-42b8-8a90-d4b4e54e7c3b'

    hRefLink:
      type: object
      required:
        - href
      properties:
        href:
          type: string

    basicResponse:
      type: object
      properties:
        id:
          type: string
          example: 3603ed66-ae86-42b8-8a90-d4b4e54e7c3b
        createdAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        createdBy:
          type: string
          example: '4c0190e5d702748f0931@AdobeId'
        modifiedAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        modifiedBy:
          type: string
          example: '4c0190e5d702748f0931@AdobeId'
        _etag:
          type: string
          description: The etag associated with this.
          example: '"eab98d24-18af-48ae-90f9-e59d4f8cfb2b"'

    subdomain:
      type: string
      example: 'marketing.example.com'

    subdomainStatus:
      type: string
      enum:
        - draft
        - processing
        - active
        - failed

    delegationType:
      type: string
      enum:
        - NS

    delegatedSubdomain:
      type: object
      required:
        - subdomain
        - status
      properties:
        subdomain:
          $ref: '#/components/schemas/subdomain'
        delegationType:
          $ref: '#/components/schemas/delegationType'
        status:
          $ref: '#/components/schemas/subdomainStatus'
        googleTxtRecord:
          type: string
        resourceDomain:
          type: string
          example: 'cdn.marketing.example.com'
        trackingDomain:
          type: string
          example: 'data.marketing.example.com'
        mirrorDomain:
          type: string
          example: 'data.marketing.example.com'

    delegatedSubdomainResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/delegatedSubdomain'
        - $ref: '#/components/schemas/basicResponse'
      properties:
        delegatedAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        isPrimary:
          type: boolean
          default: false
        errors:
          type: array
          items:
            $ref: '#/components/schemas/errorResponse'
        _links:
          $ref: '#/components/schemas/delegatedSubdomainSelfLink'

    delegatedSubdomainPatchReq:
      type: array
      items:
        required:
          - op
          - path
        properties:
          op:
            $ref: '#/components/schemas/patchOp'
          path:
            type: string
            example: "/googleTxtRecord"
          value:
            type: string
            example: "some-google-txt-record"

    patchOp:
      type: string
      enum:
        - replace
        - remove
      example: "replace"

    ptrRecord:
      type: object
      required:
        - ip
        - subdomain
        - ptrSubdomain
      properties:
        ip:
          type: string
          example: "112.196.145.195"
        subdomain:
          $ref: '#/components/schemas/subdomain'
        ptrSubdomain:
          $ref: '#/components/schemas/subdomain'

    ptrRecordResponse:
      allOf:
        - $ref: '#/components/schemas/ptrRecord'
        - $ref: '#/components/schemas/basicResponse'
      properties:
        _links:
          $ref: '#/components/schemas/ptrRecordSelfLink'

    dnsRecord:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/subdomain'
        target:
          type: string
          example: "adobe-cjm-verification=abc"
        type:
          type: string
          enum:
            - NS
            - TXT
          example: "TXT"